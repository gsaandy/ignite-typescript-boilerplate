import { Action, AnyAction, Reducer } from "redux";
import * as SI from "seamless-immutable";
import { createAction, PayloadAction } from "typesafe-actions";
import { mapReducers, ReducerMap } from "../../Lib/ReduxHelpers";

/* ------------- Types and Action Creators ------------- */
interface <%= pascalCase(props.name) %>SuccessParams {data: string; }

const actionCreators = {
  request: createAction("<%= snakeCase(props.name).toUpperCase() %>_REQUEST"),
  success: (payload: <%= pascalCase(props.name) %>SuccessParams)  => ({type: "<%= snakeCase(props.name).toUpperCase() %>_SUCCESS", payload})),
  failure: createAction("<%= snakeCase(props.name).toUpperCase() %>_FAILURE"),
};

export const <%= pascalCase(props.name) %>Actions = actionCreators;

export interface <%= pascalCase(props.name) %>State {
  data?: string | null;
  error?: boolean | null;
  fetching?: boolean | null;
}

export type <%= pascalCase(props.name) %>Action = PayloadAction<string, <%= pascalCase(props.name) %>State>;

export type Immutable<%= pascalCase(props.name) %>State = SI.ImmutableObject<<%= pascalCase(props.name) %>State>;

/* ------------- Initial State ------------- */

export const INITIAL_STATE: Immutable<%= pascalCase(props.name) %>State = SI.from({
  data: null,
  error: null,
  fetching: null,
});

/* ------------- Reducers ------------- */

export const request: Reducer<Immutable<%= pascalCase(props.name) %>State> =
(state: Immutable<%= pascalCase(props.name) %>State) =>
  state.merge({ fetching: true });

export const success: Reducer<Immutable<%= pascalCase(props.name) %>State> =
(state: Immutable<%= pascalCase(props.name) %>State, action: AnyAction & {payload?: <%= pascalCase(props.name) %>SuccessParams}) => {
  if (!action.payload) {
    return failure(state, action);
  }
  const { data } = action.payload;
  
  return state.merge({ fetching: false, error: null, data });
};

export const failure: Reducer<Immutable<%= pascalCase(props.name) %>State> = (state: Immutable<%= pascalCase(props.name) %>State) =>
  state.merge({ fetching: false, error: true, data: null });

/* ------------- Hookup Reducers To Types ------------- */

const reducerMap: ReducerMap<typeof actionCreators, Immutable<%= pascalCase(props.name) %>State> = {
  request,
  failure,
  success,
};

export const <%= pascalCase(props.name) %>Reducer = mapReducers(INITIAL_STATE, reducerMap, actionCreators);

export default <%= pascalCase(props.name) %>Reducer;
